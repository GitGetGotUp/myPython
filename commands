type integer: int()

False (=0)

await (await asyncio.sleep(seconds))

else 	

import (import library)

pass

None (no data value)

break (break out of loop)

except 

in (for i in range(x,y), 

raise

True (=1)

class 

finally 

is 

return

and 

continue 

for 

lambda 

try

as 

def 

from 

nonlocal 

while

assert 

del 	

global

not 	

with

async 

elif 	

if 	

or 	

yield


general print syntax: print(objects_to_be_printed, sep = " ", end = '\n', file = sys.stdout, flush = False)
print strings: print('') or print("")

formatting the print: 
x = Halfar, y = Immanual
str.format(): print('I am Niklas {} and {}'.format(x,y)) (or use indexing in brackets from a list in .format()

input: input([promt])

integer: whole number

float: decimal number

store data: variable = something

which class: type()

to check if object belongs to class: isinstance(object, class)

list: list = [1, "keke"]

access from list, starting at 0: list[0] 

dictionary: d = {"key": value}



type conversion: int(), float(), str()

integer to float: int + float gives float number

Explicit type conversion: 
required_datatype(expression)


arithmetic operators: 
+, -, /, *, %, //, **

comparison operators: 
<,>,==, !=, >=, <=

logical operators: 
and, or, not

Bitwise operators: 
&, |, ~, ^, <<, >>

assignment operators: 
x = 5: x = 5

x += 5: x = x+5

x-=5: x = x-5

x *=5: x = x*5

x /=5: x = x/5

generally: 
x [operator]number: x = x [operator] number

identity operators: 
True if identical: is
True if not identrical: is not

Membership operators: 
True if in sequence: in
True if not in sequence: not in

create a function: 
def name_function():
  function()
  
name_function() -> executes function
a = name_function
a() -> executes function










