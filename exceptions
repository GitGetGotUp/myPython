Exceptions:

1. Syntax errors
2. logical errors (exceptions)



built-in exceptions: print item, dir = allows to use as strings, rest is module of built-in exceptions;
print(dir(locals()['__builtins__^]))

important errors and exceptions belonging to them:
AttributeError - attribute assignment or reference fails
FloatingPointError - floating point operation fails
IndexError - index of sequence out of range
NameError - variable not found in local or global scope
SyntaxError - syntax error occured
TypeError - function or operation applied to object of incorrect type
ZeroDivisionError - second operand of division is equal to zero


how to handle these exceptions: 

Catching exceptions using try:
exception then handled with except:

portion that CAN cause exception is placed in try: block
If no exception occurs, except block skipped. 
If exception occurs it is caught in except block. 

import sys
randomList = ['a', 0, 2]
for entry in randomList:
  try:
        print("The entry is", entry)
        r = 1/int(entry)
        break
    except:
        print("Oops!", sys.exc_info()[0], "occurred.")
        print("Next entry.")
        print()
print("The reciprocal of", entry, "is", r)

we print the ValueError and ZeroDivisionError with exc_info() inside sys (sys.)

same solution, different way:
# import module sys to get the type of exception
import sys

randomList = ['a', 0, 2]

for entry in randomList:
    try:
        print("The entry is", entry)
        r = 1/int(entry)
        break
    except Exception as e:
        print("Oops!", e.__class__, "occurred.")
        print("Next entry.")
        print()
print("The reciprocal of", entry, "is", r)


Catching specific exception: 
try:
  general do something
  pass
 except specific exception:
  do this specifically
  pass

example:

try:
   # do something
   pass

except ValueError:
   # handle ValueError exception
   pass

except (TypeError, ZeroDivisionError):
   # handle multiple exceptions
   # TypeError and ZeroDivisionError
   pass

except:
   # handle all other exceptions
   pass



manually raise exception:
???


try with else clause: run code inside try if no errors, if error give except, of no error do something:
try: 
  statement
except: 
  do this instead if error
else: 
  if no error run this
  
  
the finally clause:
try: 
  statement(s)
finally: 
   executed no matter what
   
   





    
